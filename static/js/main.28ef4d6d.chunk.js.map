{"version":3,"sources":["logo.svg","utils/http.js","usePushNotification.js","push-notifications.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","host","http","post","path","body","fetch","credentials","headers","JSON","stringify","method","mode","then","response","json","data","get","pushNotificationSupported","navigator","window","usePushNotifications","useState","Notification","permission","userConsent","setSuserConsent","userSubscription","setUserSubscription","pushServerSubscriptionId","setPushServerSubscriptionId","error","setError","loading","setLoading","useEffect","serviceWorker","register","a","async","ready","pushManager","getSubscription","pushSubscription","existingSubscription","getExixtingSubscription","onClickAskUserPermission","requestPermission","consent","name","message","code","onClickSusbribeToPushNotification","subscribe","userVisibleOnly","applicationServerKey","createNotificationSubscription","subscrition","catch","err","console","onClickSendSubscriptionToPushServer","id","onClickSendNotification","App","className","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","self","addEventListener","event","image","tag","url","title","text","options","icon","vibrate","badge","actions","action","waitUntil","showNotification","notification","close","clients","openWindow","ReactDOM","render","document","getElementById","URL","process","href","origin","contentType","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.28ef4d6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const host = process.env.NODE_ENV === \"production\" ? \"https://push-notification-demo-server.herokuapp.com\" : \"http://localhost:8080\";\n\nfunction post(path, body) {\n  return fetch(`${host}${path}`, {\n    credentials: \"omit\",\n    headers: { \"content-type\": \"application/json;charset=UTF-8\", \"sec-fetch-mode\": \"cors\" },\n    body: JSON.stringify(body),\n    method: \"POST\",\n    mode: \"cors\"\n  })\n    .then(function(response) {\n      return response.json();\n    })\n    .then(function(data) {\n      return data;\n    });\n}\n\nfunction get(path) {\n  return fetch(`${host}${path}`, {\n    credentials: \"omit\",\n    headers: { \"content-type\": \"application/json;charset=UTF-8\", \"sec-fetch-mode\": \"cors\" },\n    method: \"GET\",\n    mode: \"cors\"\n  })\n    .then(function(response) {\n      return response.json();\n    })\n    .then(function(data) {\n      return data;\n    });\n}\n\nconst http = {\n  post: post,\n  get: get\n};\n\nexport default http;\n","import { useState, useEffect } from \"react\";\nimport http from \"./utils/http\";\n//the function to call the push server: https://github.com/Spyna/push-notification-demo/blob/master/front-end-react/src/utils/http.js\n\nimport {\n  isPushNotificationSupported,\n  askUserPermission,\n  registerServiceWorker,\n  createNotificationSubscription,\n  getUserSubscription\n} from \"./push-notifications\";\n//import all the function created to manage the push notifications\n\nconst pushNotificationSupported = isPushNotificationSupported();\n//first thing to do: check if the push notifications are supported by the browser\n\nexport default function usePushNotifications() {\n  const [userConsent, setSuserConsent] = useState(Notification.permission);\n  //to manage the user consent: Notification.permission is a JavaScript native function that return the current state of the permission\n  //We initialize the userConsent with that value\n  const [userSubscription, setUserSubscription] = useState(null);\n  //to manage the use push notification subscription\n  const [pushServerSubscriptionId, setPushServerSubscriptionId] = useState();\n  //to manage the push server subscription\n  const [error, setError] = useState(null);\n  //to manage errors\n  const [loading, setLoading] = useState(true);\n  //to manage async actions\n\n  useEffect(() => {\n    if (pushNotificationSupported) {\n      setLoading(true);\n      setError(false);\n      registerServiceWorker().then(() => {\n        setLoading(false);\n      });\n    }\n  }, []);\n  //if the push notifications are supported, registers the service worker\n  //this effect runs only the first render\n  \n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    const getExixtingSubscription = async () => {\n      const existingSubscription = await getUserSubscription();\n      setUserSubscription(existingSubscription);\n      setLoading(false);\n    };\n    getExixtingSubscription();\n  }, []);\n  //Retrieve if there is any push notification subscription for the registered service worker\n  // this use effect runs only in the first render\n\n  /**\n   * define a click handler that asks the user permission,\n   * it uses the setSuserConsent state, to set the consent of the user\n   * If the user denies the consent, an error is created with the setError hook\n   */\n  const onClickAskUserPermission = () => {\n    setLoading(true);\n    setError(false);\n    askUserPermission().then(consent => {\n      setSuserConsent(consent);\n      if (consent !== \"granted\") {\n        setError({\n          name: \"Consent denied\",\n          message: \"You denied the consent to receive notifications\",\n          code: 0\n        });\n      }\n      setLoading(false);\n    });\n  };\n  //\n\n  /**\n   * define a click handler that creates a push notification subscription.\n   * Once the subscription is created, it uses the setUserSubscription hook\n   */\n  const onClickSusbribeToPushNotification = () => {\n    setLoading(true);\n    setError(false);\n    createNotificationSubscription()\n      .then(function(subscrition) {\n        setUserSubscription(subscrition);\n        setLoading(false);\n      })\n      .catch(err => {\n        console.error(\"Couldn't create the notification subscription\", err, \"name:\", err.name, \"message:\", err.message, \"code:\", err.code);\n        setError(err);\n        setLoading(false);\n      });\n  };\n\n  /**\n   * define a click handler that sends the push susbcribtion to the push server.\n   * Once the subscription ics created on the server, it saves the id using the hook setPushServerSubscriptionId\n   */\n  const onClickSendSubscriptionToPushServer = () => {\n    setLoading(true);\n    setError(false);\n    http\n      .post(\"/subscription\", userSubscription)\n      .then(function(response) {\n        setPushServerSubscriptionId(response.id);\n        setLoading(false);\n      })\n      .catch(err => {\n        setLoading(false);\n        setError(err);\n      });\n  };\n\n  /**\n   * define a click handler that requests the push server to send a notification, passing the id of the saved subscription\n   */\n  const onClickSendNotification = async () => {\n    setLoading(true);\n    setError(false);\n    await http.get(`/subscription/${pushServerSubscriptionId}`).catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n    setLoading(false);\n  };\n\n  /**\n   * returns all the stuff needed by a Component\n   */\n  return {\n    onClickAskUserPermission,\n    onClickSusbribeToPushNotification,\n    onClickSendSubscriptionToPushServer,\n    pushServerSubscriptionId,\n    onClickSendNotification,\n    userConsent,\n    pushNotificationSupported,\n    userSubscription,\n    error,\n    loading\n  };\n}","\nconst pushServerPublicKey = \"BIN2Jc5Vmkmy-S3AUrcMlpKxJpLeVRAfu9WBqUbJ70SJOCWGCGXKY-Xzyh7HDr6KbRDGYHjqZ06OcS3BjD7uAm8\";\n\n/**\n * checks if Push notification and service workers are supported by your browser\n */\nfunction isPushNotificationSupported() {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n}\n\n/**\n * asks user consent to receive push notifications and returns the response of the user, one of granted, default, denied\n */\nasync function askUserPermission() {\n  return await Notification.requestPermission();\n}\n/**\n * shows a notification\n */\nfunction sendNotification() {\n  const img = \"/images/jason-leung-HM6TMmevbZQ-unsplash.jpg\";\n  const text = \"Take a look at this brand new t-shirt!\";\n  const title = \"New Product Available\";\n  const options = {\n    body: text,\n    icon: \"/images/jason-leung-HM6TMmevbZQ-unsplash.jpg\",\n    vibrate: [200, 100, 200],\n    tag: \"new-product\",\n    image: img,\n    badge: \"https://spyna.it/icons/android-icon-192x192.png\",\n    actions: [{ action: \"Detail\", title: \"View\", icon: \"https://via.placeholder.com/128/ff0000\" }]\n  };\n  navigator.serviceWorker.ready.then(function(serviceWorker) {\n    serviceWorker.showNotification(title, options);\n  });\n}\n\n/**\n *\n */\nfunction registerServiceWorker() {\n  return navigator.serviceWorker.register(\"/sw.js\");\n}\n\n/**\n *\n * using the registered service worker creates a push notification subscription and returns it\n *\n */\nasync function createNotificationSubscription() {\n  //wait for service worker installation to be ready\n  const serviceWorker = await navigator.serviceWorker.ready;\n  // subscribe and return the subscription\n  return await serviceWorker.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: pushServerPublicKey\n  });\n}\n\n/**\n * returns the subscription if present or nothing\n */\nfunction getUserSubscription() {\n  //wait for service worker installation to be ready, and then\n  return navigator.serviceWorker.ready\n    .then(function(serviceWorker) {\n      return serviceWorker.pushManager.getSubscription();\n    })\n    .then(function(pushSubscription) {\n      return pushSubscription;\n    });\n}\n\nexport {\n  isPushNotificationSupported,\n  askUserPermission,\n  registerServiceWorker,\n  sendNotification,\n  createNotificationSubscription,\n  getUserSubscription\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport usePushNotifications from \"./usePushNotification\";\n\nfunction App() {\n  const {\n    userConsent,\n    pushNotificationSupported,\n    userSubscription,\n    onClickAskUserPermission,\n    onClickSusbribeToPushNotification,\n    onClickSendSubscriptionToPushServer,\n    pushServerSubscriptionId,\n    onClickSendNotification,\n    error,\n    loading\n  } = usePushNotifications();\n\n  return (\n    <div>\n      {error && (\n        <section className=\"app-error\">\n          <h2>{error.name}</h2>\n          <p>Error message : {error.message}</p>\n          <p>Error code : {error.code}</p>\n        </section>\n      )}\n      {loading && \"Loading, please stand by\"}\n      <p>Push notification are {!pushNotificationSupported && \"NOT\"} supported by your device.</p>\n      <p>\n        User consent to recevie push notificaitons is <strong>{userConsent}</strong>.\n      </p>\n      <button onClick={onClickAskUserPermission}>Ask user permission</button>\n      <button onClick={onClickSusbribeToPushNotification}>Create Notification subscription</button>\n      <button onClick={onClickSendSubscriptionToPushServer}>Send subscription to push server</button>\n      <button onClick={onClickSendNotification}>Send a notification</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nwindow.self.addEventListener(\"push\", receivePushNotification);\nwindow.self.addEventListener(\"notificationclick\", openPushNotification);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nfunction receivePushNotification(event) {\n  console.log(\"[Service Worker] Push Received.\");\n\n  const { image, tag, url, title, text } = event.data.json();\n\n  const options = {\n    data: url,\n    body: text,\n    icon: image,\n    vibrate: [200, 100, 200],\n    tag: tag,\n    image: image,\n    badge: \"https://spyna.it/icons/favicon.ico\",\n    actions: [{ action: \"Detail\", title: \"View\", icon: \"https://via.placeholder.com/128/ff0000\" }]\n  };\n  event.waitUntil(window.self.registration.showNotification(title, options));\n}\n\nfunction openPushNotification(event) {\n  console.log(\"[Service Worker] Notification click Received.\", event.notification.data);\n  \n  event.notification.close();\n  event.waitUntil(window.self.clients.openWindow(event.notification.data));\n}\n\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}