{"version":3,"sources":["logo.svg","1.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","quote","setQuote","className","src","require","onClick","a","async","fetch","res","json","myJson","JSON","stringify","content","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","self","addEventListener","event","data","image","tag","url","title","text","options","body","icon","vibrate","badge","actions","action","waitUntil","showNotification","notification","close","clients","openWindow","ReactDOM","render","document","getElementById","URL","process","href","origin","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,kDCA3CD,EAAOC,QAAU,IAA0B,+B,yHCsB5BC,MAjBf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAQb,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OAAOC,IAAKC,EAAQ,MACnC,uBAAGF,UAAU,MAAMG,QATN,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACGE,MAAM,mCADT,cACTC,EADS,kBAAAH,EAAA,MAEMG,EAAIC,QAFV,OAETC,EAFS,OAGfV,EAASW,KAAKC,UAAUF,EAAOG,UAHhB,uCASb,oDACA,2BAAOZ,UAAU,SAASF,KCH1Be,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MA7EjEvB,OAAOwB,KAAKC,iBAAiB,QA+G7B,SAAiCC,GAC/BR,QAAQC,IAAI,mCAD0B,MAGGO,EAAMC,KAAKlC,OAA5CmC,EAH8B,EAG9BA,MAAOC,EAHuB,EAGvBA,IAAKC,EAHkB,EAGlBA,IAAKC,EAHa,EAGbA,MAAOC,EAHM,EAGNA,KAE1BC,EAAU,CACdN,KAAMG,EACNI,KAAMF,EACNG,KAAMP,EACNQ,QAAS,CAAC,IAAK,IAAK,KACpBP,IAAKA,EACLD,MAAOA,EACPS,MAAO,qCACPC,QAAS,CAAC,CAAEC,OAAQ,SAAUR,MAAO,OAAQI,KAAM,4CAErDT,EAAMc,UAAUxC,OAAOwB,KAAKb,aAAa8B,iBAAiBV,EAAOE,OA7HnEjC,OAAOwB,KAAKC,iBAAiB,qBAgI7B,SAA8BC,GAC5BR,QAAQC,IAAI,gDAAiDO,EAAMgB,aAAaf,MAEhFD,EAAMgB,aAAaC,QACnBjB,EAAMc,UAAUxC,OAAOwB,KAAKoB,QAAQC,WAAWnB,EAAMgB,aAAaf,UCtJpEmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoB1C,SAAkB3C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI2C,IAAIC,WAAwBnD,OAAOC,SAASmD,MACpDC,SAAWrD,OAAOC,SAASoD,OAIvC,OAGFrD,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAM8C,WAAN,sBAEPrD,IAgEV,SAAiCO,EAAOC,GAEtCf,MAAMc,EAAO,CACXiD,QAAS,CAAE,iBAAkB,YAE5B5C,MAAK,SAAA6C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpD,UAAUC,cAAcoD,MAAMlD,MAAK,SAAAC,GACjCA,EAAakD,aAAanD,MAAK,WAC7BV,OAAOC,SAAS6D,eAKpB1D,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA4C,CAAwB1D,EAAOC,GAI/BC,UAAUC,cAAcoD,MAAMlD,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.773aa161.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.27e86f78.png\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport usePushNotifications from \"./usePushNotification\";\n\nfunction App() {\n  const [quote, setQuote] = useState(\"\");\n  const getQuote = async () => {\n    const res = await fetch(\"https://api.quotable.io/random\");\n    const myJson = await res.json();\n    setQuote(JSON.stringify(myJson.content));\n  }\n\n  return (\n    <div className=\"container\">\n      <img className=\"duck\" src={require('./1.png')} />\n      <a className=\"btn\" onClick={getQuote} >СПРОСИТЬ</a>\n      <label className=\"quote\">{quote}</label>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nwindow.self.addEventListener(\"push\", receivePushNotification);\nwindow.self.addEventListener(\"notificationclick\", openPushNotification);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nfunction receivePushNotification(event) {\n  console.log(\"[Service Worker] Push Received.\");\n\n  const { image, tag, url, title, text } = event.data.json();\n\n  const options = {\n    data: url,\n    body: text,\n    icon: image,\n    vibrate: [200, 100, 200],\n    tag: tag,\n    image: image,\n    badge: \"https://spyna.it/icons/favicon.ico\",\n    actions: [{ action: \"Detail\", title: \"View\", icon: \"https://via.placeholder.com/128/ff0000\" }]\n  };\n  event.waitUntil(window.self.registration.showNotification(title, options));\n}\n\nfunction openPushNotification(event) {\n  console.log(\"[Service Worker] Notification click Received.\", event.notification.data);\n  \n  event.notification.close();\n  event.waitUntil(window.self.clients.openWindow(event.notification.data));\n}\n\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { initializeFirebase } from './push-notifications'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\ninitializeFirebase();\nserviceWorker.register();\n"],"sourceRoot":""}